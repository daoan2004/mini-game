'use client';

import { useState } from 'react';
import { getAliveCharacters } from '../src/data/characters';
import { getAllEvidence } from '../src/data/evidence';
import { getRoom } from '../src/data/rooms';
import CharacterCard from '../src/components/game/CharacterCard';
import EvidenceCard from '../src/components/game/EvidenceCard';
import ConversationModal from '../src/components/game/ConversationModal';
import { AccusationModal } from '../src/components/game/AccusationModal';
import InvestigationPanel from '../src/components/game/InvestigationPanel';
import SearchArea from '../src/components/game/SearchArea';
import APIStatusIndicator from '../src/components/game/APIStatusIndicator';
import SaveLoadModal from '../src/components/game/SaveLoadModal';
import AchievementModal from '../src/components/game/AchievementModal';
import AchievementNotification from '../src/components/game/AchievementNotification';
import DeductionBoard from '../src/components/game/DeductionBoard';
import EvidenceTimeline from '../src/components/game/EvidenceTimeline';
import Toast from '../src/components/ui/Toast';
import { useGameStore } from '../src/stores/gameStore';
import { Character } from '../src/types/game';
import { type Achievement } from '../src/utils/achievements';
import { useAchievements } from '../src/hooks/useAchievements';
import { useNotification } from '../src/components/ui/NotificationSystem';

export default function Home() {
  const { gamePhase, currentRoom, evidenceFound, toast, hideToast } = useGameStore();
  const { showConfirm, showToast } = useNotification();
  const characters = getAliveCharacters();
  const allEvidence = getAllEvidence();
  const currentRoomData = getRoom(currentRoom);
  
  // Conversation modal state
  const [isConversationOpen, setIsConversationOpen] = useState(false);
  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);
  
  // Accusation modal state
  const [isAccusationOpen, setIsAccusationOpen] = useState(false);
  
  // Save/Load modal state
  const [isSaveLoadOpen, setIsSaveLoadOpen] = useState(false);
  const [saveLoadMode, setSaveLoadMode] = useState<'save' | 'load'>('save');
  
  // Achievement modal state
  const [isAchievementOpen, setIsAchievementOpen] = useState(false);
  const [newAchievement, setNewAchievement] = useState<Achievement | null>(null);
  
  // Deduction board modal state
  const [isDeductionBoardOpen, setIsDeductionBoardOpen] = useState(false);

  const handleCharacterClick = (character: Character) => {
    setSelectedCharacter(character);
    setIsConversationOpen(true);
  };

  const handleCloseConversation = () => {
    setIsConversationOpen(false);
    setSelectedCharacter(null);
  };

  // Achievement system integration
  const handleAchievementUnlocked = (achievement: Achievement) => {
    setNewAchievement(achievement);
    // Auto-hide after showing
    setTimeout(() => setNewAchievement(null), 6000);
  };

  // Hook to check for achievements
  useAchievements(useGameStore.getState(), handleAchievementUnlocked);

  return (
    <div className="min-h-screen bg-slate-900 text-white">
      {/* Header */}
      <header className="bg-slate-800 border-b border-slate-700 p-6">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold text-center mb-2">
            üïµÔ∏è AI Mystery Game
          </h1>
          <p className="text-slate-400 text-center">
            B√≥ng ma bi·ªát th·ª± Gilmore
          </p>
          
          {/* Game Status */}
          <div className="mt-4 flex justify-center space-x-6 text-sm">
            <div>
              <span className="text-slate-500">Giai ƒêo·∫°n:</span>
              <span className="ml-2 capitalize text-yellow-400">{gamePhase === 'investigation' ? 'ƒëi·ªÅu tra' : gamePhase === 'accusation' ? 'bu·ªôc t·ªôi' : 'ho√†n th√†nh'}</span>
            </div>
            <div>
              <span className="text-slate-500">Ph√≤ng:</span>
              <span className="ml-2 capitalize text-blue-400">{currentRoom}</span>
            </div>
            <div>
              <span className="text-slate-500">B·∫±ng Ch·ª©ng:</span>
              <span className="ml-2 text-green-400">{evidenceFound.length}</span>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto p-4 md:p-6">
        {/* Story Introduction */}
        <div className="bg-slate-800 border border-slate-700 rounded-lg p-4 md:p-6 mb-6 md:mb-8">
          <h2 className="text-xl font-semibold mb-4">üé≠ V·ª• √°n</h2>
          <p className="text-slate-300 leading-relaxed">
            ƒê√™m gi√¥ng b√£o nƒÉm 1993, b√† Marlene Gilmore (70 tu·ªïi) ƒë∆∞·ª£c ph√°t hi·ªán ƒë√£ ch·∫øt 
            trong ph√≤ng ri√™ng t·∫°i bi·ªát th·ª± c·ªï nh√† Gilmore. C·ª≠a ph√≤ng kh√≥a t·ª´ b√™n trong, 
            kh√¥ng c√≥ d·∫•u hi·ªáu ƒë·ªôt nh·∫≠p. Tr∆∞·ªõc ƒë√≥ b√† v·ª´a tuy√™n b·ªë s·∫Ω thay ƒë·ªïi di ch√∫c, 
            ƒëi·ªÅu khi·∫øn c√°c th√†nh vi√™n gia ƒë√¨nh hoang mang.
          </p>
          <p className="text-slate-400 mt-3 text-sm">
            L√† th√°m t·ª≠ ƒë∆∞·ª£c thu√™, b·∫°n ph·∫£i ƒëi·ªÅu tra v√† t√¨m ra s·ª± th·∫≠t...
          </p>
        </div>

        {/* Investigation Status Panel */}
        <div className="mb-6 md:mb-8">
          <InvestigationPanel />
        </div>

        {/* Evidence Timeline */}
        {evidenceFound.length > 0 && (
          <div className="mb-6 md:mb-8">
            <EvidenceTimeline />
          </div>
        )}

        {/* Characters Section */}
        <div className="mb-6 md:mb-8">
          <h2 className="text-lg md:text-xl font-semibold mb-3 md:mb-4">üë• Nghi ph·∫°m</h2>
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 md:gap-4">
            {characters.map((character) => (
              <CharacterCard
                key={character.id}
                character={character}
                showTrustLevel={true}
                onClick={() => handleCharacterClick(character)}
              />
            ))}
          </div>
        </div>

        {/* Current Room */}
        <div className="mb-6 md:mb-8">
          <h2 className="text-lg md:text-xl font-semibold mb-3 md:mb-4">üè† {currentRoomData?.name || 'Ph√≤ng Kh√¥ng X√°c ƒê·ªãnh'}</h2>
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-4 md:p-6 mb-3 md:mb-4">
            <p className="text-slate-300 leading-relaxed mb-2">
              {currentRoomData?.description || 'B·∫°n th·∫•y m√¨nh ·ªü m·ªôt n∆°i xa l·∫°.'}
            </p>
            <p className="text-slate-400 text-sm italic">
              {currentRoomData?.atmosphere || ''}
            </p>
          </div>
          
          <h3 className="text-base md:text-lg font-semibold mb-3">üîç T√¨m Ki·∫øm B·∫±ng Ch·ª©ng</h3>
          <SearchArea currentRoom={currentRoom} />
        </div>

        {/* Evidence Inventory */}
        <div className="mb-6 md:mb-8">
          <h2 className="text-lg md:text-xl font-semibold mb-3 md:mb-4">üìã Kho B·∫±ng Ch·ª©ng ({evidenceFound.length})</h2>
          <div className="bg-slate-800 border border-slate-700 rounded-lg p-4 md:p-6">
            {evidenceFound.length === 0 ? (
              <p className="text-slate-500 text-center py-8">
                Ch∆∞a t√¨m ƒë∆∞·ª£c b·∫±ng ch·ª©ng n√†o...
              </p>
            ) : (
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3 md:gap-4">
                {evidenceFound.map((evidenceId) => {
                  const evidence = allEvidence.find(e => e.id === evidenceId);
                  return evidence ? (
                    <EvidenceCard
                      key={evidence.id}
                      evidence={evidence}
                      showDetails={true}
                      isClickable={false}
                    />
                  ) : null;
                })}
              </div>
            )}
          </div>
        </div>

        {/* Room Navigation */}
        <div className="mb-6 md:mb-8">
          <h2 className="text-lg md:text-xl font-semibold mb-3 md:mb-4">üè† Di Chuy·ªÉn Trong Bi·ªát Th·ª±</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 md:gap-3">
            {['living_room', 'marlene_bedroom', 'bathroom', 'elise_room', 'arthur_study', 'back_door'].map((room) => (
              <button
                key={room}
                className={`
                  px-3 md:px-4 py-2 md:py-3 rounded-lg font-medium transition-all text-xs md:text-sm
                  ${currentRoom === room 
                    ? 'bg-blue-600 text-white border-2 border-blue-400' 
                    : 'bg-slate-700 text-slate-300 hover:bg-slate-600 border-2 border-slate-600'
                  }
                `}
                onClick={() => useGameStore.getState().setCurrentRoom(room)}
              >
                {room === 'living_room' ? 'Ph√≤ng Kh√°ch' :
                 room === 'marlene_bedroom' ? 'Ph√≤ng Ng·ªß Marlene' :
                 room === 'bathroom' ? 'Ph√≤ng T·∫Øm' :
                 room === 'elise_room' ? 'Ph√≤ng Elise' :
                 room === 'arthur_study' ? 'Ph√≤ng L√†m Vi·ªác Arthur' :
                 room === 'back_door' ? 'C·ª≠a Sau' :
                 room.replace('_', ' ').split(' ').map(word => 
                   word.charAt(0).toUpperCase() + word.slice(1)
                 ).join(' ')}
              </button>
            ))}
          </div>
        </div>

        {/* Actions */}
        <div className="flex flex-wrap justify-center gap-3 md:gap-4">
          <button 
            className="bg-red-600 hover:bg-red-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={() => setIsAccusationOpen(true)}
          >
            ‚öñÔ∏è Bu·ªôc T·ªôi
          </button>
          
          <button 
            className="bg-blue-600 hover:bg-blue-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={() => {
              setSaveLoadMode('save');
              setIsSaveLoadOpen(true);
            }}
          >
            üíæ L∆∞u Game
          </button>
          
          <button 
            className="bg-purple-600 hover:bg-purple-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={() => {
              setSaveLoadMode('load');
              setIsSaveLoadOpen(true);
            }}
          >
            üìÇ T·∫£i Game
          </button>
          
          <button 
            className="bg-yellow-600 hover:bg-yellow-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={() => setIsDeductionBoardOpen(true)}
          >
            üß© B·∫£ng Suy Lu·∫≠n
          </button>
          
          <button 
            className="bg-purple-600 hover:bg-purple-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={() => setIsAchievementOpen(true)}
          >
            üèÜ Th√†nh T√≠ch
          </button>
          
          <button 
            className="bg-gray-600 hover:bg-gray-700 text-white px-4 md:px-6 py-2 md:py-3 rounded-lg font-semibold transition-colors text-sm md:text-base shadow-lg hover:shadow-xl"
            onClick={async () => {
              const confirmed = await showConfirm({
                title: 'Reset Game',
                message: 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën reset game? T·∫•t c·∫£ ti·∫øn tr√¨nh s·∫Ω b·ªã m·∫•t.',
                confirmText: 'Reset',
                cancelText: 'H·ªßy',
                danger: true,
                onConfirm: () => useGameStore.getState().resetGame()
              });
              
              if (confirmed) {
                showToast({
                  type: 'success',
                  title: 'Game ƒë√£ ƒë∆∞·ª£c reset',
                  message: 'B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc ƒëi·ªÅu tra m·ªõi'
                });
              }
            }}
          >
            üîÑ Ch∆°i L·∫°i
          </button>
        </div>
      </main>

      {/* Conversation Modal */}
      {selectedCharacter && (
        <ConversationModal
          isOpen={isConversationOpen}
          onClose={handleCloseConversation}
          character={selectedCharacter}
        />
      )}

      {/* Accusation Modal */}
      <AccusationModal
        isOpen={isAccusationOpen}
        onClose={() => setIsAccusationOpen(false)}
      />

      {/* Save/Load Modal */}
      <SaveLoadModal
        isOpen={isSaveLoadOpen}
        onClose={() => setIsSaveLoadOpen(false)}
        mode={saveLoadMode}
      />

      {/* Achievement Modal */}
      <AchievementModal
        isOpen={isAchievementOpen}
        onClose={() => setIsAchievementOpen(false)}
      />

      {/* Deduction Board Modal */}
      <DeductionBoard
        isOpen={isDeductionBoardOpen}
        onClose={() => setIsDeductionBoardOpen(false)}
      />

      {/* Achievement Notification */}
      <AchievementNotification
        achievement={newAchievement}
        onClose={() => setNewAchievement(null)}
      />

      {/* API Status Indicator */}
      <APIStatusIndicator />

      {/* Toast Notification */}
      <Toast
        isOpen={toast.isOpen}
        onClose={hideToast}
        title={toast.title}
        message={toast.message}
        type={toast.type}
      />
    </div>
  );
}
