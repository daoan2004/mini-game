'use client';

import { useState } from 'react';
import Image from 'next/image';
import { Evidence } from '../../types/game';
import Modal from '../ui/Modal';

interface EvidenceLabProps {
  isOpen: boolean;
  onClose: () => void;
  evidenceList: Evidence[];
  onAnalysisComplete: (insights: string[]) => void;
}

interface AnalysisResult {
  toolId: string;
  evidenceId: string;
  finding: string;
  accuracy: number;
}

export default function EvidenceLab({
  isOpen,
  onClose,
  evidenceList,
  onAnalysisComplete
}: EvidenceLabProps) {
  const [selectedEvidence, setSelectedEvidence] = useState<Evidence | null>(null);
  const [labPoints, setLabPoints] = useState(100);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [showResults, setShowResults] = useState(false);

  const labTools = [
    {
      id: 'microscope',
      name: 'K√≠nh hi·ªÉn vi',
      icon: 'üî¨',
      description: 'Ph√¢n t√≠ch chi ti·∫øt c·∫•u tr√∫c v√† v·∫≠t li·ªáu',
      cost: 15
    },
    {
      id: 'uv_light',
      name: 'ƒê√®n UV',
      icon: 'üí°',
      description: 'Ph√°t hi·ªán d·∫•u v·∫øt ·∫©n v√† ch·∫•t l·ªèng',
      cost: 10
    },
    {
      id: 'chemical_kit',
      name: 'B·ªô h√≥a ch·∫•t',
      icon: 'üß™',
      description: 'Ki·ªÉm tra th√†nh ph·∫ßn h√≥a h·ªçc',
      cost: 20
    },
    {
      id: 'fingerprint_scanner',
      name: 'M√°y qu√©t v√¢n tay',
      icon: 'üëÜ',
      description: 'Ph√¢n t√≠ch v√† so s√°nh d·∫•u v√¢n tay',
      cost: 25
    }
  ];

  const [usedTools, setUsedTools] = useState<string[]>([]);

  const getEvidenceFindings = (evidenceId: string, toolId: string): { finding: string; accuracy: number } => {
    const findings: Record<string, Record<string, { finding: string; accuracy: number }>> = {
      wine_glass: {
        microscope: { finding: 'Ph√°t hi·ªán vi khu·∫©n v√† t·∫ø b√†o da ng∆∞·ªùi. V·∫øt son m√¥i c√≥ th√†nh ph·∫ßn ƒë·∫∑c bi·ªát.', accuracy: 85 },
        uv_light: { finding: 'C√≥ d·∫•u v·∫øt ch·∫•t l·ªèng kh√¥ kh√¥ng th·ªÉ nh√¨n th·∫•y b·∫±ng m·∫Øt th∆∞·ªùng.', accuracy: 70 },
        chemical_kit: { finding: 'R∆∞·ª£u vang b√¨nh th∆∞·ªùng, nh∆∞ng c√≥ d∆∞ l∆∞·ª£ng thu·ªëc tim digitalis.', accuracy: 95 },
        fingerprint_scanner: { finding: 'Ba b·ªô d·∫•u v√¢n tay kh√°c nhau: Marlene, Selena v√† m·ªôt ng∆∞·ªùi ch∆∞a x√°c ƒë·ªãnh.', accuracy: 90 }
      },
      threatening_letter: {
        microscope: { finding: 'Gi·∫•y th√¥ng th∆∞·ªùng, m·ª±c b√∫t bi xanh. C√≥ d·∫•u hi·ªáu vi·∫øt v·ªôi.', accuracy: 75 },
        uv_light: { finding: 'Kh√¥ng c√≥ d·∫•u v·∫øt ·∫©n n√†o d∆∞·ªõi √°nh s√°ng UV.', accuracy: 60 },
        chemical_kit: { finding: 'M·ª±c c√≥ th√†nh ph·∫ßn ti√™u chu·∫©n, kh√¥ng c√≥ h√≥a ch·∫•t ƒë·∫∑c bi·ªát.', accuracy: 65 },
        fingerprint_scanner: { finding: 'Ch·ªâ c√≥ m·ªôt b·ªô d·∫•u v√¢n tay, c√≥ v·∫ª ƒë∆∞·ª£c che gi·∫•u c·∫©n th·∫≠n.', accuracy: 80 }
      },
      spare_key: {
        microscope: { finding: 'Kim lo·∫°i c√≥ d·∫•u hi·ªáu m√†i m√≤n g·∫ßn ƒë√¢y, ƒë·∫∑c bi·ªát ·ªü rƒÉng kh√≥a.', accuracy: 90 },
        uv_light: { finding: 'C√≥ d·∫•u v·∫øt m·ªì h√¥i v√† d·∫ßu tay t∆∞∆°i.', accuracy: 75 },
        chemical_kit: { finding: 'Kh√¥ng c√≥ h√≥a ch·∫•t l·∫°, ch·ªâ c√≥ d·∫ßu b√¥i tr∆°n th√¥ng th∆∞·ªùng.', accuracy: 70 },
        fingerprint_scanner: { finding: 'D·∫•u v√¢n tay r√µ r√†ng c·ªßa m·ªôt ng∆∞·ªùi n·ªØ.', accuracy: 95 }
      }
    };

    return findings[evidenceId]?.[toolId] || { finding: 'Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c th√¥ng tin ƒë·∫∑c bi·ªát.', accuracy: 50 };
  };

  const handleToolUse = (toolId: string) => {
    if (!selectedEvidence) return;
    
    const tool = labTools.find(t => t.id === toolId)!;
    if (labPoints < tool.cost || usedTools.includes(toolId)) return;

    const result = getEvidenceFindings(selectedEvidence.id, toolId);
    
    setLabPoints(labPoints - tool.cost);
    setUsedTools([...usedTools, toolId]);
    setAnalysisResults([...analysisResults, {
      toolId,
      evidenceId: selectedEvidence.id,
      finding: result.finding,
      accuracy: result.accuracy
    }]);
  };

  const completeAnalysis = () => {
    const insights = [];
    const averageAccuracy = analysisResults.length > 0 ? 
      analysisResults.reduce((sum, r) => sum + r.accuracy, 0) / analysisResults.length : 0;

    if (averageAccuracy >= 85) {
      insights.push('üèÜ Ph√¢n t√≠ch lab xu·∫•t s·∫Øc! B·∫°n ƒë√£ thu th·∫≠p ƒë∆∞·ª£c nhi·ªÅu th√¥ng tin quan tr·ªçng.');
    } else if (averageAccuracy >= 70) {
      insights.push('üëç Ph√¢n t√≠ch lab t·ªët! C√≥ m·ªôt s·ªë ph√°t hi·ªán h·ªØu √≠ch.');
    } else {
      insights.push('üìö K·∫øt qu·∫£ ph√¢n t√≠ch c∆° b·∫£n. C·∫ßn s·ª≠ d·ª•ng nhi·ªÅu c√¥ng c·ª• h∆°n.');
    }

    // Specific insights based on findings
    const chemicalResults = analysisResults.filter(r => r.toolId === 'chemical_kit');
    if (chemicalResults.some(r => r.finding.includes('digitalis'))) {
      insights.push('‚ö†Ô∏è Ph√°t hi·ªán quan tr·ªçng: C√≥ d·∫•u hi·ªáu thu·ªëc tim trong r∆∞·ª£u vang!');
    }

    onAnalysisComplete(insights);
  };

  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="üî¨ Ph√≤ng Lab Ph√¢n T√≠ch B·∫±ng Ch·ª©ng">
      <div className="h-[75vh] flex flex-col">
        {!showResults ? (
          <>
            {/* Lab Status */}
            <div className="mb-4 p-4 bg-gray-800 rounded-lg">
              <div className="flex justify-between items-center">
                <h3 className="text-lg font-semibold text-white">Tr·∫°ng th√°i Lab</h3>
                <div className="flex items-center gap-4">
                  <span className="text-blue-400">ƒêi·ªÉm Lab: <strong>{labPoints}</strong></span>
                  <span className="text-green-400">Ph√¢n t√≠ch: <strong>{analysisResults.length}</strong></span>
                </div>
              </div>
            </div>

            <div className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-6 overflow-y-auto">
              {/* Evidence Selection */}
              <div>
                <h3 className="text-lg font-semibold text-white mb-3">üìã Ch·ªçn B·∫±ng Ch·ª©ng</h3>
                <div className="space-y-2 max-h-48 overflow-y-auto">
                  {evidenceList.map((evidence) => (
                    <div
                      key={evidence.id}
                      className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${
                        selectedEvidence?.id === evidence.id
                          ? 'bg-blue-900/30 border-blue-500'
                          : 'bg-gray-800 border-gray-600 hover:border-gray-500'
                      }`}
                      onClick={() => setSelectedEvidence(evidence)}
                    >
                      <div className="flex items-center gap-3">
                        {evidence.image && (
                          <div className="w-12 h-12 rounded-lg overflow-hidden flex-shrink-0">
                            <Image
                              src={evidence.image}
                              alt={evidence.name}
                              width={48}
                              height={48}
                              className="w-full h-full object-cover"
                            />
                          </div>
                        )}
                        <div className="flex-1 min-w-0">
                          <div className="font-semibold text-white text-sm">{evidence.name}</div>
                          <div className="text-xs text-gray-400 line-clamp-2">{evidence.description}</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Lab Tools */}
                <h3 className="text-lg font-semibold text-white mb-3 mt-4">üõ†Ô∏è C√¥ng C·ª• Lab</h3>
                <div className="space-y-2">
                  {labTools.map((tool) => {
                    const isUsed = usedTools.includes(tool.id);
                    const canUse = selectedEvidence && labPoints >= tool.cost && !isUsed;
                    
                    return (
                      <div
                        key={tool.id}
                        className={`p-3 rounded-lg border-2 transition-all ${
                          isUsed
                            ? 'bg-green-900/20 border-green-700 opacity-60'
                            : canUse
                            ? 'bg-gray-800 border-gray-600 hover:border-blue-500 cursor-pointer'
                            : 'bg-gray-900 border-gray-700 opacity-50'
                        }`}
                                                 onClick={() => {
                           if (canUse) {
                             handleToolUse(tool.id);
                           }
                         }}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <span className="text-xl">{tool.icon}</span>
                            <div>
                              <div className="font-semibold text-white text-sm">{tool.name}</div>
                              <div className="text-xs text-gray-400">{tool.description}</div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-yellow-400 text-sm">-{tool.cost}</div>
                            {isUsed && <div className="text-green-400 text-xs">‚úÖ ƒê√£ d√πng</div>}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>

              {/* Analysis Results */}
              <div>
                <h3 className="text-lg font-semibold text-white mb-3">üìä K·∫øt Qu·∫£ Ph√¢n T√≠ch</h3>
                <div className="bg-gray-800 rounded-lg p-4 max-h-80 overflow-y-auto">
                  {analysisResults.length === 0 ? (
                    <div className="text-center text-gray-500 py-8">
                      <div className="text-4xl mb-2">üî¨</div>
                      <p className="text-sm">Ch·ªçn b·∫±ng ch·ª©ng v√† c√¥ng c·ª• ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch</p>
                    </div>
                  ) : (
                    <div className="space-y-3">
                      {analysisResults.map((result, index) => (
                        <div key={index} className="bg-gray-700 p-3 rounded-lg">
                          <div className="flex items-center justify-between mb-2">
                            <span className="font-medium text-blue-400 text-sm">
                              {labTools.find(t => t.id === result.toolId)?.name}
                            </span>
                            <span className={`text-xs px-2 py-1 rounded ${
                              result.accuracy >= 85 ? 'bg-green-600' :
                              result.accuracy >= 70 ? 'bg-yellow-600' : 'bg-red-600'
                            }`}>
                              {result.accuracy}%
                            </span>
                          </div>
                          <p className="text-xs text-gray-300">{result.finding}</p>
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Action Buttons */}
            <div className="mt-4 flex justify-between">
              <button
                onClick={onClose}
                className="px-4 py-2 bg-gray-600 hover:bg-gray-700 text-white rounded-lg transition-colors"
              >
                üö™ Tho√°t Lab
              </button>
              <button
                onClick={() => setShowResults(true)}
                disabled={analysisResults.length === 0}
                className="px-6 py-2 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white rounded-lg transition-colors"
              >
                üìã K·∫øt lu·∫≠n ph√¢n t√≠ch
              </button>
            </div>
          </>
        ) : (
          /* Results Summary */
          <div className="flex-1 flex items-center justify-center">
            <div className="text-center max-w-md">
              <div className="text-6xl mb-4">üß™</div>
              <h3 className="text-xl font-semibold text-white mb-4">Ph√¢n T√≠ch Lab Ho√†n Th√†nh!</h3>
              
              <div className="bg-gray-800 p-4 rounded-lg mb-6">
                <div className="text-gray-300 space-y-2">
                  <div>T·ªïng ph√¢n t√≠ch: <span className="font-bold text-blue-400">{analysisResults.length}</span></div>
                  <div>ƒê·ªô ch√≠nh x√°c trung b√¨nh: <span className="font-bold text-green-400">
                    {analysisResults.length > 0 ? Math.round(analysisResults.reduce((sum, r) => sum + r.accuracy, 0) / analysisResults.length) : 0}%
                  </span></div>
                  <div>ƒêi·ªÉm c√≤n l·∫°i: <span className="font-bold text-yellow-400">{labPoints}</span></div>
                </div>
              </div>
              
              <button
                onClick={() => {
                  completeAnalysis();
                  onClose();
                }}
                className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors"
              >
                üìÑ Xem b√°o c√°o chi ti·∫øt
              </button>
            </div>
          </div>
        )}
      </div>
    </Modal>
  );
} 