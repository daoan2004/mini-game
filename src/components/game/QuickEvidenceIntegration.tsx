'use client';

import React, { useState } from 'react';
import { Character } from '../../types/game';
import { useGameStore } from '../../stores/gameStore';
import { EVIDENCE_ITEMS } from '../../data/evidence';

interface QuickEvidenceIntegrationProps {
  character: Character;
  onQuestionWithEvidence: (question: string, evidenceId: string) => void;
  isVisible: boolean;
}

export function QuickEvidenceIntegration({ 
  character, 
  onQuestionWithEvidence, 
  isVisible 
}: QuickEvidenceIntegrationProps) {
  const { evidenceFound } = useGameStore();
  const [selectedEvidence, setSelectedEvidence] = useState<string>('');

  if (!isVisible || evidenceFound.length === 0) return null;

  // Evidence-specific question templates
  const getEvidenceQuestions = (evidenceId: string): string[] => {
    const templates: Record<string, string[]> = {
      wine_glass: [
        'Ly r∆∞·ª£u n√†y c√≥ v·∫øt son m√¥i. Ch·ªã/anh c√≥ bi·∫øt ai ƒë√£ u·ªëng t·ª´ ly n√†y kh√¥ng?',
        'T√¥i t√¨m th·∫•y ly r∆∞·ª£u n√†y trong ph√≤ng b√† Marlene. Ai th∆∞·ªùng u·ªëng r∆∞·ª£u vang trong nh√†?',
        'C√≥ v·∫ª nh∆∞ c√≥ ch·∫•t l·∫° trong ly r∆∞·ª£u n√†y. Ch·ªã/anh c√≥ th·ªÉ gi·∫£i th√≠ch kh√¥ng?'
      ],
      threatening_letter: [
        'L√° th∆∞ ƒëe d·ªça n√†y ƒë∆∞·ª£c vi·∫øt b·∫±ng tay. Ch·ªã/anh c√≥ nh·∫≠n ra ch·ªØ vi·∫øt kh√¥ng?',
        'Th∆∞ n√†y ƒë·ªÅ c·∫≠p ƒë·∫øn v·∫•n ƒë·ªÅ t√†i ch√≠nh. Ch·ªã/anh c√≥ bi·∫øt ai ƒëang g·∫∑p kh√≥ khƒÉn v·ªÅ ti·ªÅn b·∫°c?',
        'B√† Marlene c√≥ nh·∫Øc ƒë·∫øn vi·ªác nh·∫≠n ƒë∆∞·ª£c th∆∞ ƒëe d·ªça kh√¥ng?'
      ],
      spare_key: [
        'Ch√¨a kh√≥a d·ª± ph√≤ng n√†y c√≥ th·ªÉ m·ªü ph√≤ng b√† Marlene. Ai bi·∫øt v·ªÅ s·ª± t·ªìn t·∫°i c·ªßa n√≥?',
        'T√¥i t√¨m th·∫•y ch√¨a kh√≥a n√†y ·ªü v·ªã tr√≠ ƒë√°ng ng·ªù. Ch·ªã/anh c√≥ th·ªÉ gi·∫£i th√≠ch kh√¥ng?',
        'C√≥ ai kh√°c ngo√†i ch·ªã/anh c√≥ th·ªÉ ti·∫øp c·∫≠n ch√¨a kh√≥a n√†y kh√¥ng?'
      ],
      gambling_receipt: [
        'Bi√™n lai c·ªù b·∫°c n√†y cho th·∫•y kho·∫£n n·ª£ l·ªõn. Ch·ªã/anh c√≥ bi·∫øt ai ƒëang g·∫∑p √°p l·ª±c t√†i ch√≠nh?',
        'Ng∆∞·ªùi n√†y n·ª£ 500,000 USD. ƒêi·ªÅu n√†y c√≥ th·ªÉ t·∫°o ƒë·ªông c∆° gi·∫øt ng∆∞·ªùi kh√¥ng?',
        'B√† Marlene c√≥ bi·∫øt v·ªÅ v·∫•n ƒë·ªÅ c·ªù b·∫°c trong gia ƒë√¨nh kh√¥ng?'
      ],
      bloody_handkerchief: [
        'KhƒÉn tay n√†y c√≥ v·∫øt m√°u. Ch·ªã/anh c√≥ th·ªÉ gi·∫£i th√≠ch v·∫øt m√°u n√†y kh√¥ng?',
        'T√¥i t√¨m th·∫•y khƒÉn tay n√†y g·∫ßn hi·ªán tr∆∞·ªùng. N√≥ thu·ªôc v·ªÅ ai?',
        'V·∫øt m√°u n√†y c√≥ th·ªÉ li√™n quan ƒë·∫øn c√°i ch·∫øt c·ªßa b√† Marlene kh√¥ng?'
      ],
      muddy_shoes: [
        'ƒê√¥i gi√†y n√†y c√≥ b√πn ƒë·∫•t. Ai ƒë√£ ra ngo√†i v√†o ƒë√™m m∆∞a b√£o?',
        'V·∫øt b√πn n√†y cho th·∫•y ai ƒë√≥ ƒë√£ r·ªùi kh·ªèi nh√†. Ch·ªã/anh c√≥ bi·∫øt ai kh√¥ng?',
        'T·∫°i sao l·∫°i c√≥ ng∆∞·ªùi ra ngo√†i trong ƒë√™m gi√¥ng b√£o nh∆∞ v·∫≠y?'
      ]
    };

    return templates[evidenceId] || [
      `V·ªÅ b·∫±ng ch·ª©ng ${EVIDENCE_ITEMS[evidenceId]?.name || evidenceId}, ch·ªã/anh c√≥ th·ªÉ cho t√¥i bi·∫øt g√¨?`,
      `T√¥i t√¨m th·∫•y ${EVIDENCE_ITEMS[evidenceId]?.name || evidenceId}. ƒêi·ªÅu n√†y c√≥ √Ω nghƒ©a g√¨?`,
      `${EVIDENCE_ITEMS[evidenceId]?.name || evidenceId} n√†y c√≥ li√™n quan ƒë·∫øn ch·ªã/anh kh√¥ng?`
    ];
  };

  const handleQuestionSelect = (question: string) => {
    if (selectedEvidence) {
      onQuestionWithEvidence(question, selectedEvidence);
      setSelectedEvidence('');
    }
  };

  return (
    <div className="bg-gradient-to-r from-purple-900 to-blue-900 border border-purple-500 rounded-lg p-3 mb-3">
      <div className="flex items-center gap-2 mb-3">
        <span className="text-lg">üîç</span>
        <h4 className="text-white font-medium text-sm">C√¢u H·ªèi V·ªõi B·∫±ng Ch·ª©ng</h4>
      </div>

      {/* Evidence Selector */}
      <div className="mb-3">
        <label className="text-sm text-purple-200 mb-2 block">
          Ch·ªçn b·∫±ng ch·ª©ng ƒë·ªÉ h·ªèi:
        </label>
        <select
          value={selectedEvidence}
          onChange={(e) => setSelectedEvidence(e.target.value)}
          className="w-full bg-purple-800 border border-purple-600 rounded px-3 py-2 text-white text-sm"
        >
          <option value="">-- Ch·ªçn b·∫±ng ch·ª©ng --</option>
          {evidenceFound.map((evidenceId) => {
            const evidence = EVIDENCE_ITEMS[evidenceId];
            return (
              <option key={evidenceId} value={evidenceId}>
                {evidence ? evidence.name : evidenceId.replace('_', ' ')}
              </option>
            );
          })}
        </select>
      </div>

      {/* Question Templates */}
      {selectedEvidence && (
        <div className="space-y-2">
          <p className="text-sm text-purple-200 mb-2">C√¢u h·ªèi g·ª£i √Ω:</p>
          {getEvidenceQuestions(selectedEvidence).map((question, index) => (
            <button
              key={index}
              onClick={() => handleQuestionSelect(question)}
              className="w-full text-left p-3 bg-purple-800 hover:bg-purple-700 border border-purple-600 rounded text-sm text-white transition-colors"
            >
              <div className="flex items-start gap-2">
                <span className="text-purple-300 mt-1">‚Ä¢</span>
                <span>{question}</span>
              </div>
            </button>
          ))}
        </div>
      )}

      {!selectedEvidence && (
        <div className="text-center py-4 text-purple-300 text-sm">
          Ch·ªçn b·∫±ng ch·ª©ng ƒë·ªÉ xem c√¢u h·ªèi g·ª£i √Ω
        </div>
      )}

      {/* Character-specific tips */}
      <div className="mt-3 pt-3 border-t border-purple-600">
        <p className="text-xs text-purple-200">
          üí° <strong>M·∫πo v·ªõi {character.name}:</strong>{' '}
          {character.id === 'arthur' && 'H·ªèi v·ªÅ t√†i ch√≠nh v√† √°p l·ª±c kinh t·∫ø'}
          {character.id === 'selena' && 'T·∫≠p trung v√†o m·ªëi quan h·ªá gia ƒë√¨nh v√† th·ª´a k·∫ø'}
          {character.id === 'elise' && 'Khai th√°c s·ª± trung th√†nh v√† ki·∫øn th·ª©c v·ªÅ gia ƒë√¨nh'}
          {character.id === 'marcus' && 'Ti·∫øp c·∫≠n nh·∫π nh√†ng, t·∫°o s·ª± tin t∆∞·ªüng'}
        </p>
      </div>
    </div>
  );
} 