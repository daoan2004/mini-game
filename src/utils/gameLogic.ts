import { GameState } from '../types/game';
import { CRITICAL_EVIDENCE, RED_HERRINGS, EVIDENCE_ITEMS } from '../data/evidence';
import { CHARACTERS } from '../data/characters';

// The actual murderer and solution
export const SOLUTION = {
  murderer: 'selena', // Selena is the actual killer
  motive: 'inheritance_conflict',
  method: 'poison_in_wine',
  keyEvidence: ['wine_glass', 'threatening_letter', 'spare_key', 'diary_page']
};

export interface AccusationResult {
  success: boolean;
  isCorrect: boolean;
  message: string;
  evidenceScore: number;
  trustScore: number;
  gameEnded: boolean;
  ending: 'victory' | 'failure' | 'partial' | null;
}

// Check if player has enough evidence to make accusations
export function canMakeAccusation(evidenceFound: string[]): boolean {
  const criticalFound = CRITICAL_EVIDENCE.filter(id => evidenceFound.includes(id));
  return criticalFound.length >= 2; // Need at least 2 critical evidence
}

// Calculate evidence score (0-100)
export function calculateEvidenceScore(evidenceFound: string[]): number {
  const totalEvidence = Object.keys(EVIDENCE_ITEMS).length;
  const criticalFound = CRITICAL_EVIDENCE.filter(id => evidenceFound.includes(id));
  const redHerringsFound = RED_HERRINGS.filter(id => evidenceFound.includes(id));
  
  // Base score from evidence percentage
  const baseScore = (evidenceFound.length / totalEvidence) * 60;
  
  // Bonus for critical evidence
  const criticalBonus = (criticalFound.length / CRITICAL_EVIDENCE.length) * 30;
  
  // Penalty for red herrings
  const redHerringPenalty = redHerringsFound.length * 5;
  
  return Math.max(0, Math.min(100, baseScore + criticalBonus - redHerringPenalty));
}

// Calculate trust score with all NPCs
export function calculateTrustScore(npcTrust: Record<string, number>): number {
  const trustValues = Object.values(npcTrust);
  const averageTrust = trustValues.reduce((a, b) => a + b, 0) / trustValues.length;
  return Math.round(averageTrust);
}

// Make an accusation against a character
export function makeAccusation(
  accusedId: string, 
  gameState: GameState
): AccusationResult {
  const evidenceScore = calculateEvidenceScore(gameState.evidenceFound);
  const trustScore = calculateTrustScore(gameState.npcTrust);
  const criticalFound = CRITICAL_EVIDENCE.filter(id => gameState.evidenceFound.includes(id));
  
  const isCorrectAccusation = accusedId === SOLUTION.murderer;
  const hasEnoughEvidence = criticalFound.length >= 3;
  const hasHighTrust = trustScore >= 60;
  
  // Determine result based on multiple factors
  if (isCorrectAccusation && hasEnoughEvidence && hasHighTrust) {
    return {
      success: true,
      isCorrect: true,
      message: getVictoryMessage(accusedId, evidenceScore, trustScore),
      evidenceScore,
      trustScore,
      gameEnded: true,
      ending: 'victory'
    };
  } else if (isCorrectAccusation && hasEnoughEvidence) {
    return {
      success: true,
      isCorrect: true,
      message: getPartialVictoryMessage(accusedId, evidenceScore, trustScore),
      evidenceScore,
      trustScore,
      gameEnded: true,
      ending: 'partial'
    };
  } else if (isCorrectAccusation && !hasEnoughEvidence) {
    return {
      success: false,
      isCorrect: true,
      message: getInsufficientEvidenceMessage(accusedId),
      evidenceScore,
      trustScore,
      gameEnded: false,
      ending: null
    };
  } else {
    return {
      success: false,
      isCorrect: false,
      message: getWrongAccusationMessage(accusedId, evidenceScore),
      evidenceScore,
      trustScore,
      gameEnded: evidenceScore < 30, // Game ends if evidence score too low
      ending: evidenceScore < 30 ? 'failure' : null
    };
  }
}

// Get victory message
function getVictoryMessage(accusedId: string, evidenceScore: number, trustScore: number): string {
  const character = CHARACTERS[accusedId];
  return `
üéâ **V·ª§ √ÅN ƒê√É ƒê∆Ø·ª¢C GI·∫¢I QUY·∫æT!** üéâ

Xu·∫•t s·∫Øc! B·∫°n ƒë√£ th√†nh c√¥ng x√°c ƒë·ªãnh **${character.name}** l√† k·∫ª gi·∫øt Marlene Gilmore.

**Cu·ªôc ƒêi·ªÅu Tra C·ªßa B·∫°n:**
- ƒêi·ªÉm B·∫±ng Ch·ª©ng: ${evidenceScore}%
- ƒêi·ªÉm Tin C·∫≠y: ${trustScore}%

**S·ª± Th·∫≠t ƒê∆∞·ª£c Ti·∫øt L·ªô:**
Selena ƒë√£ ƒë·∫ßu ƒë·ªôc r∆∞·ª£u vang c·ªßa Marlene v√¨ tuy·ªát v·ªçng. C√¥ bi·∫øt v·ªÅ kho·∫£n n·ª£ c·ªù b·∫°c c·ªßa Arthur v√† s·ª£ gia t√†i s·∫Ω b·ªã m·∫•t. Khi Marlene ƒëe d·ªça thay ƒë·ªïi di ch√∫c, Selena th·∫•y c∆° h·ªôi duy nh·∫•t ƒëang tr√¥i ƒëi.

S·ª≠ d·ª•ng ch√¨a kh√≥a d·ª± ph√≤ng c·ªßa Elise, c√¥ ƒë√£ v√†o ph√≤ng Marlene ƒë√™m ƒë√≥ v√† ƒë·∫ßu ƒë·ªôc r∆∞·ª£u. V·∫øt son tr√™n ly ch√≠nh l√† sai l·∫ßm ch·∫øt ng∆∞·ªùi - manh m·ªëi d·∫´n th√°m t·ª≠ t√†i ba ƒë·∫øn s·ª± th·∫≠t.

**T√¨nh Tr·∫°ng V·ª• √Ån: ƒê√É GI·∫¢I QUY·∫æT** ‚úÖ
B·∫°n th·ª±c s·ª± l√† m·ªôt th√°m t·ª≠ b·∫≠c th·∫ßy! üïµÔ∏è‚Äç‚ôÇÔ∏è
  `;
}

// Get partial victory message
function getPartialVictoryMessage(accusedId: string, evidenceScore: number, trustScore: number): string {
  const character = CHARACTERS[accusedId];
  return `
‚öñÔ∏è **BU·ªòC T·ªòI ƒê√öNG - TH√ÄNH C√îNG M·ªòT PH·∫¶N** ‚öñÔ∏è

B·∫°n ƒë√£ x√°c ƒë·ªãnh ch√≠nh x√°c **${character.name}** l√† k·∫ª gi·∫øt ng∆∞·ªùi, nh∆∞ng v·ª• √°n c√≥ m·ªôt s·ªë ƒëi·ªÉm y·∫øu.

**Cu·ªôc ƒêi·ªÅu Tra C·ªßa B·∫°n:**
- ƒêi·ªÉm B·∫±ng Ch·ª©ng: ${evidenceScore}%
- ƒêi·ªÉm Tin C·∫≠y: ${trustScore}%

**K·∫øt Qu·∫£:**
D√π b·∫°n t√¨m ƒë√∫ng nghi ph·∫°m, ${trustScore < 60 ? 's·ª± thi·∫øu tin c·∫≠y t·ª´ nh√¢n ch·ª©ng' : 'b·∫±ng ch·ª©ng kh√¥ng ƒë·ªß'} khi·∫øn v·ª• √°n kh√≥ ch·ª©ng minh t·∫°i t√≤a. Selena th√∫ t·ªôi d∆∞·ªõi √°p l·ª±c, nh∆∞ng m·ªôt lu·∫≠t s∆∞ gi·ªèi c√≥ th·ªÉ t√¨m ra nghi ng·ªù h·ª£p l√Ω.

**T√¨nh Tr·∫°ng V·ª• √Ån: GI·∫¢I QUY·∫æT V·ªöI NGHI NG·ªú** ‚ö†Ô∏è
C√¥ng vi·ªác th√°m t·ª≠ t·ªët, nh∆∞ng v·∫´n c√≤n ch·ªó c·∫£i thi·ªán.
  `;
}

// Get insufficient evidence message
function getInsufficientEvidenceMessage(accusedId: string): string {
  const character = CHARACTERS[accusedId];
  return `
‚ùå **B·∫∞NG CH·ª®NG KH√îNG ƒê·ª¶** ‚ùå

B·∫°n nghi ng·ªù **${character.name}** l√† k·∫ª gi·∫øt ng∆∞·ªùi, v√† tr·ª±c gi√°c c√≥ th·ªÉ ƒë√∫ng, nh∆∞ng b·∫°n kh√¥ng c√≥ ƒë·ªß b·∫±ng ch·ª©ng ƒë·ªÉ bu·ªôc t·ªôi ch·∫Øc ch·∫Øn.

**Nh·ªØng g√¨ b·∫°n c·∫ßn:**
- Th√™m b·∫±ng ch·ª©ng quan tr·ªçng (c√≤n ${CRITICAL_EVIDENCE.length - CRITICAL_EVIDENCE.filter(id => EVIDENCE_ITEMS[id]).length} c√°i)
- M·ª©c ƒë·ªô tin c·∫≠y cao h∆°n v·ªõi nh√¢n ch·ª©ng
- K·∫øt n·ªëi m·∫°nh m·∫Ω h∆°n gi·ªØa b·∫±ng ch·ª©ng v√† nghi ph·∫°m

**H√£y ti·∫øp t·ª•c ƒëi·ªÅu tra!** T√¨m ki·∫øm th√™m ph√≤ng v√† x√¢y d·ª±ng m·ªëi quan h·ªá t·ªët h∆°n v·ªõi nh√¢n ch·ª©ng. S·ª± th·∫≠t ƒëang trong t·∫ßm tay.

**T√¨nh Tr·∫°ng V·ª• √Ån: ƒêANG TI·∫æN H√ÄNH** üîç
  `;
}

// Get wrong accusation message
function getWrongAccusationMessage(accusedId: string, evidenceScore: number): string {
  const character = CHARACTERS[accusedId];
  
  if (evidenceScore < 30) {
    return `
üí• **BU·ªòC T·ªòI SAI - V·ª§ √ÅN ƒê√ìNG** üí•

C√°o bu·ªôc c·ªßa b·∫°n ƒë·ªëi v·ªõi **${character.name}** l√† sai v√† ƒë√£ l√†m h·ªèng nghi√™m tr·ªçng cu·ªôc ƒëi·ªÅu tra.

**Th·∫•t B·∫°i Nghi√™m Tr·ªçng:**
- ƒêi·ªÉm B·∫±ng Ch·ª©ng: ${evidenceScore}% (Qu√° Th·∫•p!)
- K·∫ª gi·∫øt ng∆∞·ªùi th·∫≠t ƒë√£ tho√°t t·ªôi
- Danh ti·∫øng th√°m t·ª≠ c·ªßa b·∫°n b·ªã h·ªßy ho·∫°i

**ƒêi·ªÅu g√¨ ƒë√£ sai:**
B·∫°n d·ª±a qu√° nhi·ªÅu v√†o b·∫±ng ch·ª©ng gi·∫£ v√† kh√¥ng thu th·∫≠p ƒë·ªß b·∫±ng ch·ª©ng. ${character.name} c√≥ b·∫±ng ch·ª©ng ngo·∫°i ph·∫°m, v√† k·∫ª gi·∫øt ng∆∞·ªùi th·∫≠t v·∫´n t·ª± do.

**T√¨nh Tr·∫°ng V·ª• √Ån: TH·∫§T B·∫†I** ‚ùå
V·ª• √°n s·∫Ω m√£i m√£i kh√¥ng ƒë∆∞·ª£c gi·∫£i quy·∫øt.
    `;
  } else {
    return `
‚ùå **BU·ªòC T·ªòI SAI** ‚ùå

C√°o bu·ªôc c·ªßa b·∫°n ƒë·ªëi v·ªõi **${character.name}** l√† kh√¥ng ch√≠nh x√°c.

**Cu·ªôc ƒëi·ªÅu tra ti·∫øp t·ª•c:**
- ƒêi·ªÉm B·∫±ng Ch·ª©ng: ${evidenceScore}%
- B·∫°n v·∫´n c√≤n c∆° h·ªôi t√¨m ra k·∫ª gi·∫øt ng∆∞·ªùi th·∫≠t
- Xem l·∫°i b·∫±ng ch·ª©ng v√† c√¢n nh·∫Øc l·∫°i nghi ph·∫°m

**Ph·∫£n h·ªìi c·ªßa ${character.name}:**
"Th√°m t·ª≠, t√¥i hi·ªÉu t·∫°i sao √¥ng nghi ng·ªù t√¥i, nh∆∞ng t√¥i ƒë·∫£m b·∫£o m√¨nh v√¥ t·ªôi. Xin h√£y ti·∫øp t·ª•c ƒëi·ªÅu tra - k·∫ª gi·∫øt ng∆∞·ªùi th·∫≠t ph·∫£i ƒë∆∞·ª£c t√¨m ra."

**T√¨nh Tr·∫°ng V·ª• √Ån: ƒêANG TI·∫æN H√ÄNH** üîç
ƒê·ª´ng b·ªè cu·ªôc! S·ª± th·∫≠t v·∫´n ·ªü ngo√†i kia.
    `;
  }
}

// Get available suspects for accusation
export function getAvailableSuspects(): string[] {
  return Object.keys(CHARACTERS).filter(id => id !== 'marlene'); // Can't accuse the victim
}

// Get investigation status
export function getInvestigationStatus(gameState: GameState): {
  evidenceScore: number;
  trustScore: number;
  canAccuse: boolean;
  progress: string;
} {
  const evidenceScore = calculateEvidenceScore(gameState.evidenceFound);
  const trustScore = calculateTrustScore(gameState.npcTrust);
  const canAccuse = canMakeAccusation(gameState.evidenceFound);
  
  let progress = 'B·∫Øt ƒê·∫ßu';
  if (evidenceScore >= 80) progress = 'ƒêi·ªÅu Tra Chuy√™n Nghi·ªáp';
  else if (evidenceScore >= 60) progress = 'Ti·∫øn Tri·ªÉn T·ªët';
  else if (evidenceScore >= 40) progress = 'ƒêang Ti·∫øn B·ªô';
  else if (evidenceScore >= 20) progress = 'ƒêi·ªÅu Tra S∆° B·ªô';
  
  return {
    evidenceScore,
    trustScore,
    canAccuse,
    progress
  };
}

// Get hints for next steps
export function getInvestigationHints(gameState: GameState): string[] {
  const hints: string[] = [];
  const criticalFound = CRITICAL_EVIDENCE.filter(id => gameState.evidenceFound.includes(id));
  const trustScore = calculateTrustScore(gameState.npcTrust);
  
  if (criticalFound.length < 2) {
    hints.push("üîç T√¨m ki·∫øm k·ªπ l∆∞·ª°ng h∆°n trong c√°c ph√≤ng - b·∫±ng ch·ª©ng quan tr·ªçng v·∫´n c√≤n thi·∫øu");
  }
  
  if (trustScore < 50) {
    hints.push("üí¨ X√¢y d·ª±ng m·ªëi quan h·ªá t·ªët h∆°n v·ªõi nh√¢n ch·ª©ng qua ƒë·ªëi tho·∫°i");
  }
  
  if (gameState.evidenceFound.length < 4) {
    hints.push("üìã B·∫°n m·ªõi ch·ªâ t√¨m ƒë∆∞·ª£c v√†i m·∫©u b·∫±ng ch·ª©ng - h√£y ti·∫øp t·ª•c t√¨m ki·∫øm");
  }
  
  if (gameState.conversationHistory.length < 8) {
    hints.push("üó£Ô∏è N√≥i chuy·ªán nhi·ªÅu h∆°n v·ªõi t·ª´ng nh√¢n v·∫≠t ƒë·ªÉ hi·ªÉu ƒë·ªông c∆° c·ªßa h·ªç");
  }
  
  if (RED_HERRINGS.some(id => gameState.evidenceFound.includes(id))) {
    hints.push("‚ö†Ô∏è H√£y c·∫©n th·∫≠n - m·ªôt s·ªë b·∫±ng ch·ª©ng c√≥ th·ªÉ ƒë√°nh l·ª´a");
  }
  
  return hints.length > 0 ? hints : ["üéØ B·∫°n ƒë√£ s·∫µn s√†ng bu·ªôc t·ªôi!"];
} 