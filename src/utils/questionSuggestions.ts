import { Character, ConversationMessage } from '../types/game';

export interface QuestionSuggestion {
  id: string;
  text: string;
  type: 'evidence-based' | 'general' | 'relationship' | 'alibi' | 'motive' | 'pressure';
  priority: number; // 1-5, higher = more important
  requiredEvidence?: string[];
  targetCharacter: string;
  category: string;
  expectedReaction: 'defensive' | 'nervous' | 'cooperative' | 'angry' | 'surprised';
  followUpQuestions?: string[];
}

// Evidence-based question templates
const EVIDENCE_QUESTION_TEMPLATES: Record<string, QuestionSuggestion[]> = {
  wine_glass: [
    {
      id: 'wine_glass_general',
      text: 'T√¥i t√¨m th·∫•y ly r∆∞·ª£u vang n√†y trong ph√≤ng b√† Marlene. Anh/ch·ªã c√≥ bi·∫øt g√¨ v·ªÅ n√≥ kh√¥ng?',
      type: 'evidence-based',
      priority: 4,
      requiredEvidence: ['wine_glass'],
      targetCharacter: 'all',
      category: 'B·∫±ng ch·ª©ng v·∫≠t l√Ω',
      expectedReaction: 'cooperative',
      followUpQuestions: [
        'Ai th∆∞·ªùng u·ªëng r∆∞·ª£u vang trong nh√† n√†y?',
        'B√† Marlene c√≥ th√≥i quen u·ªëng r∆∞·ª£u tr∆∞·ªõc khi ng·ªß kh√¥ng?'
      ]
    },
    {
      id: 'wine_glass_selena',
      text: 'Ly r∆∞·ª£u n√†y c√≥ v·∫øt son m√¥i. M√†u son n√†y c√≥ gi·ªëng v·ªõi m√†u son ch·ªã th∆∞·ªùng d√πng kh√¥ng?',
      type: 'evidence-based',
      priority: 5,
      requiredEvidence: ['wine_glass'],
      targetCharacter: 'selena',
      category: 'B·∫±ng ch·ª©ng ƒë·ªãnh t·ªôi',
      expectedReaction: 'defensive'
    }
  ],

  threatening_letter: [
    {
      id: 'letter_general',
      text: 'T√¥i t√¨m th·∫•y l√° th∆∞ ƒëe d·ªça n√†y. Anh/ch·ªã c√≥ nh·∫≠n ra ch·ªØ vi·∫øt kh√¥ng?',
      type: 'evidence-based',
      priority: 5,
      requiredEvidence: ['threatening_letter'],
      targetCharacter: 'all',
      category: 'B·∫±ng ch·ª©ng quan tr·ªçng',
      expectedReaction: 'surprised'
    },
    {
      id: 'letter_arthur',
      text: 'L√° th∆∞ n√†y vi·∫øt v·ªÅ v·∫•n ƒë·ªÅ t√†i ch√≠nh. Anh c√≥ ƒëang g·∫∑p kh√≥ khƒÉn v·ªÅ ti·ªÅn b·∫°c kh√¥ng?',
      type: 'evidence-based',
      priority: 4,
      requiredEvidence: ['threatening_letter'],
      targetCharacter: 'arthur',
      category: 'ƒê·ªông c∆° t√†i ch√≠nh',
      expectedReaction: 'defensive'
    }
  ],

  spare_key: [
    {
      id: 'key_elise',
      text: 'Ch√¨a kh√≥a d·ª± ph√≤ng n√†y ƒë∆∞·ª£c t√¨m th·∫•y trong ph√≤ng ch·ªã. Ch·ªã c√≥ gi·∫£i th√≠ch ƒë∆∞·ª£c kh√¥ng?',
      type: 'evidence-based',
      priority: 5,
      requiredEvidence: ['spare_key'],
      targetCharacter: 'elise',
      category: 'C∆° h·ªôi ph·∫°m t·ªôi',
      expectedReaction: 'nervous'
    }
  ],

  gambling_receipt: [
    {
      id: 'gambling_arthur',
      text: 'Bi√™n lai c·ªù b·∫°c n√†y cho th·∫•y anh n·ª£ m·ªôt kho·∫£n ti·ªÅn l·ªõn. Anh c√≥ c·∫ßn ti·ªÅn g·∫•p kh√¥ng?',
      type: 'evidence-based',
      priority: 5,
      requiredEvidence: ['gambling_receipt'],
      targetCharacter: 'arthur',
      category: 'ƒê·ªông c∆° t√†i ch√≠nh',
      expectedReaction: 'angry',
      followUpQuestions: [
        'Anh c√≥ y√™u c·∫ßu m·∫π cho ti·ªÅn tr·∫£ n·ª£ kh√¥ng?',
        'B√† Marlene c√≥ bi·∫øt v·ªÅ vi·ªác c·ªù b·∫°c c·ªßa anh kh√¥ng?'
      ]
    }
  ]
};

// General questions when no specific evidence
const GENERAL_QUESTIONS: Record<string, QuestionSuggestion[]> = {
  arthur: [
    {
      id: 'arthur_relationship',
      text: 'M·ªëi quan h·ªá gi·ªØa anh v√† m·∫π anh th·∫ø n√†o g·∫ßn ƒë√¢y?',
      type: 'relationship',
      priority: 3,
      targetCharacter: 'arthur',
      category: 'M·ªëi quan h·ªá gia ƒë√¨nh',
      expectedReaction: 'defensive'
    },
    {
      id: 'arthur_alibi',
      text: 'Anh ·ªü ƒë√¢u v√†o kho·∫£ng 10 gi·ªù t·ªëi h√¥m qua?',
      type: 'alibi',
      priority: 4,
      targetCharacter: 'arthur',
      category: 'Ch·ª©ng minh ngo·∫°i ph·∫°m',
      expectedReaction: 'cooperative'
    }
  ],

  selena: [
    {
      id: 'selena_inheritance',
      text: 'Ch·ªã c√≥ bi·∫øt v·ªÅ k·∫ø ho·∫°ch thay ƒë·ªïi di ch√∫c c·ªßa b√† Marlene kh√¥ng?',
      type: 'motive',
      priority: 4,
      targetCharacter: 'selena',
      category: 'ƒê·ªông c∆° th·ª´a k·∫ø',
      expectedReaction: 'nervous'
    },
    {
      id: 'selena_marriage',
      text: 'Cu·ªôc h√¥n nh√¢n c·ªßa ch·ªã v√† Arthur th·∫ø n√†o?',
      type: 'relationship',
      priority: 3,
      targetCharacter: 'selena',
      category: 'M·ªëi quan h·ªá gia ƒë√¨nh',
      expectedReaction: 'defensive',
      followUpQuestions: [
        'C√≥ v·∫•n ƒë·ªÅ g√¨ trong h√¥n nh√¢n kh√¥ng?',
        'B√† Marlene c√≥ can thi·ªáp v√†o cu·ªôc h√¥n nh√¢n c·ªßa ch·ªã kh√¥ng?'
      ]
    }
  ],

  elise: [
    {
      id: 'elise_loyalty',
      text: 'Ch·ªã l√†m vi·ªác ·ªü ƒë√¢y bao l√¢u r·ªìi? M·ªëi quan h·ªá v·ªõi b√† Marlene th·∫ø n√†o?',
      type: 'relationship',
      priority: 3,
      targetCharacter: 'elise',
      category: 'M·ªëi quan h·ªá c√¥ng vi·ªác',
      expectedReaction: 'cooperative'
    },
    {
      id: 'elise_access',
      text: 'V·ªõi t∆∞ c√°ch ng∆∞·ªùi gi√∫p vi·ªác, ch·ªã c√≥ th·ªÉ t·ª± do ra v√†o c√°c ph√≤ng kh√¥ng?',
      type: 'general',
      priority: 4,
      targetCharacter: 'elise',
      category: 'C∆° h·ªôi ph·∫°m t·ªôi',
      expectedReaction: 'nervous',
      followUpQuestions: [
        'Ch·ªã c√≥ ch√¨a kh√≥a ph√≤ng b√† Marlene kh√¥ng?',
        'Ai kh√°c c√≥ th·ªÉ v√†o ph√≤ng b√† Marlene?'
      ]
    }
  ],

  marcus: [
    {
      id: 'marcus_behavior',
      text: 'Em c√≥ th·∫•y c√≥ g√¨ b·∫•t th∆∞·ªùng x·∫£y ra t·ªëi qua kh√¥ng?',
      type: 'general',
      priority: 3,
      targetCharacter: 'marcus',
      category: 'Nh√¢n ch·ª©ng',
      expectedReaction: 'nervous'
    },
    {
      id: 'marcus_whereabouts',
      text: 'Em ·ªü ƒë√¢u v√†o t·ªëi qua? C√≥ ai ch·ª©ng ki·∫øn kh√¥ng?',
      type: 'alibi',
      priority: 4,
      targetCharacter: 'marcus',
      category: 'Ch·ª©ng minh ngo·∫°i ph·∫°m',
      expectedReaction: 'defensive',
      followUpQuestions: [
        'Em c√≥ r·ªùi kh·ªèi ph√≤ng l√∫c n√†o kh√¥ng?',
        'Em c√≥ n√≥i chuy·ªán v·ªõi b√† ngo·∫°i t·ªëi qua kh√¥ng?'
      ]
    }
  ]
};

// Pressure questions - use when trust is low or need to push harder
const PRESSURE_QUESTIONS: Record<string, QuestionSuggestion[]> = {
  arthur: [
    {
      id: 'arthur_pressure_money',
      text: 'Anh ƒëang n·ª£ ti·ªÅn, m·∫π anh t·ª´ ch·ªëi gi√∫p, v√† b√¢y gi·ªù b√† ·∫•y ch·∫øt. ƒê√¢y kh√¥ng ph·∫£i tr√πng h·ª£p ƒë√∫ng kh√¥ng?',
      type: 'pressure',
      priority: 5,
      targetCharacter: 'arthur',
      category: '√Åp l·ª±c t√¢m l√Ω',
      expectedReaction: 'angry',
      followUpQuestions: [
        'Anh c√≥ gi·∫øt m·∫π m√¨nh v√¨ ti·ªÅn kh√¥ng?',
        'Anh nghƒ© t√¥i s·∫Ω tin l·ªùi bi·ªán minh c·ªßa anh?'
      ]
    }
  ],

  selena: [
    {
      id: 'selena_pressure_wine',
      text: 'V·∫øt son tr√™n ly r∆∞·ª£u kh·ªõp v·ªõi son c·ªßa ch·ªã. Ch·ªã c√≤n mu·ªën ch·ªëi c√£i n·ªØa kh√¥ng?',
      type: 'pressure',
      priority: 5,
      requiredEvidence: ['wine_glass'],
      targetCharacter: 'selena',
      category: 'ƒê·ªëi ch·∫•t b·∫±ng ch·ª©ng',
      expectedReaction: 'defensive',
      followUpQuestions: [
        'Ch·ªã c√≥ u·ªëng r∆∞·ª£u v·ªõi b√† Marlene t·ªëi ƒë√≥ kh√¥ng?',
        'Ch·ªã c√≥ b·ªè g√¨ v√†o ly r∆∞·ª£u kh√¥ng?'
      ]
    }
  ]
};

export class QuestionSuggestionEngine {
  static getSuggestedQuestions(
    character: Character,
    evidenceFound: string[],
    trustLevel: number,
    conversationHistory: ConversationMessage[]
  ): QuestionSuggestion[] {
    const suggestions: QuestionSuggestion[] = [];

    // Add evidence-based questions
    evidenceFound.forEach(evidenceId => {
      const evidenceQuestions = EVIDENCE_QUESTION_TEMPLATES[evidenceId] || [];
      evidenceQuestions.forEach(q => {
        if (q.targetCharacter === character.id || q.targetCharacter === 'all') {
          suggestions.push(q);
        }
      });
    });

    // Add general questions
    const generalQuestions = GENERAL_QUESTIONS[character.id] || [];
    suggestions.push(...generalQuestions);

    // Add pressure questions if trust is low
    if (trustLevel < 30) {
      const pressureQuestions = PRESSURE_QUESTIONS[character.id] || [];
      suggestions.push(...pressureQuestions);
    }

    // Filter out questions already asked
    const askedQuestions = conversationHistory
      .filter(msg => msg.characterId === character.id)
      .map(msg => msg.message.toLowerCase());

    const filteredSuggestions = suggestions.filter(q => {
      const questionLower = q.text.toLowerCase();
      return !askedQuestions.some(asked => 
        asked.includes(questionLower.substring(0, 20)) || 
        questionLower.includes(asked.substring(0, 20))
      );
    });

    // Sort by priority
    return filteredSuggestions.sort((a, b) => b.priority - a.priority);
  }

  static getContextualHints(
    character: Character,
    evidenceFound: string[],
    trustLevel: number
  ): string[] {
    const hints: string[] = [];

    // Character-specific hints
    switch (character.id) {
      case 'arthur':
        if (evidenceFound.includes('gambling_receipt')) {
          hints.push('üí° Arthur c√≥ v·∫ª cƒÉng th·∫≥ng v·ªÅ t√†i ch√≠nh. H√£y khai th√°c ƒëi·ªÅu n√†y.');
        }
        if (trustLevel < 40) {
          hints.push('‚ö†Ô∏è Arthur ƒëang che gi·∫•u ƒëi·ªÅu g√¨ ƒë√≥. H√£y √°p l·ª±c h∆°n.');
        }
        break;

      case 'selena':
        if (evidenceFound.includes('wine_glass')) {
          hints.push('üîç Ly r∆∞·ª£u c√≥ th·ªÉ li√™n quan ƒë·∫øn Selena. H√£y h·ªèi v·ªÅ v·∫øt son.');
        }
        if (evidenceFound.includes('threatening_letter')) {
          hints.push('üìù L√° th∆∞ ƒëe d·ªça c√≥ th·ªÉ ti·∫øt l·ªô ƒë·ªông c∆°.');
        }
        break;

      case 'elise':
        if (evidenceFound.includes('spare_key')) {
          hints.push('üîë Elise c√≥ ch√¨a kh√≥a d·ª± ph√≤ng. H√£y h·ªèi v·ªÅ vi·ªác ti·∫øp c·∫≠n ph√≤ng.');
        }
        if (trustLevel > 70) {
          hints.push('‚úÖ Elise tin t∆∞·ªüng b·∫°n. C√≥ th·ªÉ h·ªèi v·ªÅ b√≠ m·∫≠t gia ƒë√¨nh.');
        }
        break;

      case 'marcus':
        if (evidenceFound.length < 2) {
          hints.push('üë¶ Marcus c√≥ th·ªÉ bi·∫øt ƒëi·ªÅu g√¨ ƒë√≥ nh∆∞ng s·ª£ n√≥i. H√£y t·∫°o ni·ªÅm tin.');
        }
        break;
    }

    // General investigation hints
    if (evidenceFound.length === 0) {
      hints.push('üîç H√£y t√¨m b·∫±ng ch·ª©ng tr∆∞·ªõc khi h·ªèi ƒë·ªÉ c√≥ c√¢u h·ªèi c·ª• th·ªÉ h∆°n.');
    }

    if (trustLevel < 20) {
      hints.push('‚ùå ƒê·ªô tin t∆∞·ªüng qu√° th·∫•p. H√£y th·ª≠ c√°ch ti·∫øp c·∫≠n nh·∫π nh√†ng h∆°n.');
    }

    return hints;
  }

  static getQuestionStrategy(
    character: Character,
    evidenceFound: string[],
    trustLevel: number
  ): {
    approach: 'gentle' | 'direct' | 'aggressive';
    reasoning: string;
    suggestedOrder: string[];
  } {
    let approach: 'gentle' | 'direct' | 'aggressive' = 'direct';
    let reasoning = '';
    const suggestedOrder: string[] = [];

    // Determine approach based on character and trust
    if (trustLevel < 20) {
      approach = 'gentle';
      reasoning = 'ƒê·ªô tin t∆∞·ªüng th·∫•p, c·∫ßn x√¢y d·ª±ng rapport tr∆∞·ªõc';
      suggestedOrder.push('relationship', 'general', 'evidence-based');
    } else if (trustLevel > 70) {
      approach = 'direct';
      reasoning = 'ƒê·ªô tin t∆∞·ªüng cao, c√≥ th·ªÉ h·ªèi tr·ª±c ti·∫øp';
      suggestedOrder.push('evidence-based', 'motive', 'pressure');
    } else {
      approach = 'direct';
      reasoning = 'C√¢n b·∫±ng gi·ªØa x√¢y d·ª±ng tin t∆∞·ªüng v√† thu th·∫≠p th√¥ng tin';
      suggestedOrder.push('general', 'evidence-based', 'relationship');
    }

    // Adjust based on character personality
    switch (character.id) {
      case 'arthur':
        if (evidenceFound.includes('gambling_receipt') && trustLevel > 50) {
          approach = 'aggressive';
          reasoning = 'C√≥ b·∫±ng ch·ª©ng m·∫°nh v·ªÅ Arthur, c√≥ th·ªÉ √°p l·ª±c';
        }
        break;
      case 'elise':
        approach = 'gentle';
        reasoning = 'Elise nh√∫t nh√°t, c·∫ßn ti·∫øp c·∫≠n nh·∫π nh√†ng';
        break;
      case 'marcus':
        approach = 'gentle';
        reasoning = 'Marcus c√≤n tr·∫ª, c·∫ßn t·∫°o an to√†n t√¢m l√Ω';
        break;
    }

    return { approach, reasoning, suggestedOrder };
  }
} 